{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///usr/local/darkflows/src/live-ifstat/app/api/server-info/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { promisify } from 'util'\nimport { exec } from 'child_process'\n\nconst execAsync = promisify(exec);\n\nexport const runtime = 'nodejs';\n\nasync function getMemoryInfo() {\n  const { stdout } = await execAsync('free -m')\n  // Parse total memory from \"Mem:\" line\n  const lines = stdout.trim().split('\\n')\n  let totalMemMB = 0\n  for (const line of lines) {\n    if (line.startsWith('Mem:')) {\n      const parts = line.split(/\\s+/)\n      totalMemMB = parseInt(parts[1], 10)\n      break\n    }\n  }\n  return totalMemMB\n}\n\nasync function getCPUInfo() {\n  const { stdout } = await execAsync('lscpu')\n  // lscpu output varies, but includes lines like:\n  // CPU(s):              4\n  // Model name:          Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz\n  const lines = stdout.trim().split('\\n')\n  let cpus = 0\n  let model = ''\n  for (const line of lines) {\n    if (line.startsWith('CPU(s):')) {\n      cpus = parseInt(line.split(':')[1].trim(), 10)\n    } else if (line.startsWith('Model name:')) {\n      model = line.split(':')[1].trim()\n    }\n  }\n  return { cpus, model }\n}\n\nasync function getOSInfo() {\n  // Try /etc/os-release\n  try {\n    const { stdout } = await execAsync('cat /etc/os-release')\n    // /etc/os-release contains lines like:\n    // NAME=\"Ubuntu\"\n    // VERSION=\"20.04.5 LTS (Focal Fossa)\"\n    // ...\n    const lines = stdout.trim().split('\\n')\n    let name = ''\n    let version = ''\n    for (const line of lines) {\n      if (line.startsWith('NAME=')) {\n        name = line.split('=')[1].replace(/\"/g, '')\n      } else if (line.startsWith('VERSION=')) {\n        version = line.split('=')[1].replace(/\"/g, '')\n      }\n    }\n    return { name, version }\n  } catch (error) {\n    console.error('Failed to get OS info:', error)\n    return { name: 'Unknown OS', version: '' }\n  }\n}\n\nasync function getNetworkInterfaces() {\n  // We'll use `ip link` to list interfaces, then `ethtool` to get speed if available\n  const { stdout } = await execAsync('ip link')\n  // ip link output looks like:\n  // 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 ...\n  // 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 ...\n  const lines = stdout.trim().split('\\n')\n  \n  const interfaces: { name: string, speed?: string }[] = []\n  for (const line of lines) {\n    const match = line.match(/^\\d+: ([^:]+):/)\n    if (match && match[1] !== 'lo') {\n      interfaces.push({ name: match[1] })\n    }\n  }\n\n  // Attempt to get speeds with `ethtool`\n  for (const iface of interfaces) {\n    try {\n      const { stdout } = await execAsync(`ethtool ${iface.name}`)\n      // ethtool output might contain: \"Speed: 1000Mb/s\"\n      const speedLine = stdout.split('\\n').find(l => l.includes('Speed:'))\n      if (speedLine) {\n        iface.speed = speedLine.split(':')[1].trim()\n      } else {\n        iface.speed = 'Unknown'\n      }\n    } catch {\n      iface.speed = 'Unknown'\n    }\n  }\n\n  return interfaces\n}\n\nexport async function GET() {\n  try {\n    const [totalMemMB, cpuInfo, osInfo, netIfaces] = await Promise.all([\n      getMemoryInfo(),\n      getCPUInfo(),\n      getOSInfo(),\n      getNetworkInterfaces()\n    ])\n\n    const data = {\n      totalMemMB,\n      cpus: cpuInfo.cpus,\n      cpuModel: cpuInfo.model,\n      osName: osInfo.name,\n      osVersion: osInfo.version,\n      interfaces: netIfaces\n    }\n\n    return NextResponse.json(data)\n  } catch (error: unknown) {\n    console.error('Error fetching server info:', error)\n    return NextResponse.json({ error: 'Failed to fetch server info' }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}