{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///usr/local/darkflows/src/live-ifstat/app/api/network-config/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport fs from 'fs/promises'\nimport { exec } from 'child_process'\nimport util from 'util'\n\nconst execAsync = util.promisify(exec)\nconst CONFIG_PATH = '/etc/darkflows/d_network.cfg'\nconst UPDATE_SCRIPT = '/usr/local/darkflows/bin/update_cake.sh'\n\ninterface BandwidthValue {\n  value: string;\n  unit: string;\n}\n\ninterface NetworkConfig {\n  PRIMARY_EGRESS_BANDWIDTH: BandwidthValue;\n  PRIMARY_INGRESS_BANDWIDTH: BandwidthValue;\n  SECONDARY_EGRESS_BANDWIDTH: BandwidthValue;\n  SECONDARY_INGRESS_BANDWIDTH: BandwidthValue;\n  [key: string]: BandwidthValue | string;\n}\n\nexport async function GET() {\n  try {\n    const config = await fs.readFile(CONFIG_PATH, 'utf-8')\n    console.log('Raw config file contents:', config)\n    \n    const parsedConfig = config.split('\\n').reduce((acc: NetworkConfig, line, index) => {\n      console.log(`Processing line ${index + 1}:`, line)\n      \n      // Skip comments and empty lines\n      if (line.trim().startsWith('#') || !line.trim()) {\n        console.log('Skipping comment or empty line')\n        return acc\n      }\n      \n      const match = line.match(/^(\\w+)=\"([^\"]*)\"/)\n      if (match) {\n        const [, key, value] = match\n        console.log('Matched key-value pair:', { key, value })\n        \n        // Parse bandwidth values with units\n        if (key.includes('BANDWIDTH')) {\n          const bandwidthMatch = value.match(/^([\\d.]+)(Mbit|gbit)$/i)\n          if (bandwidthMatch) {\n            const [, numValue, unit] = bandwidthMatch\n            acc[key] = { value: numValue, unit: unit.toLowerCase() }\n            console.log('Processed bandwidth value:', { key, value: numValue, unit })\n          } else {\n            acc[key] = { value: value, unit: 'Mbit' } // default to Mbit if no unit specified\n            console.log('Processed bandwidth value (no unit):', { key, value, unit: 'Mbit' })\n          }\n        } else {\n          acc[key] = value\n          console.log('Stored non-bandwidth value:', { key, value })\n        }\n      } else {\n        console.log('No match found for line')\n      }\n      return acc\n    }, {} as NetworkConfig)\n    \n    console.log('Final parsed config:', parsedConfig)\n    return NextResponse.json(parsedConfig)\n  } catch (error) {\n    console.error('Config read error:', error);\n    return NextResponse.json({ error: 'Failed to read config', details: String(error) }, { status: 500 })\n  }\n}\n\nexport async function POST(request: Request) {\n  console.log('POST /api/network-config started')\n  try {\n    const data = await request.json()\n    console.log('Received config data:', data)\n    \n    // Read existing config to preserve comments and other settings\n    console.log('Reading existing config from:', CONFIG_PATH)\n    const existingConfig = await fs.readFile(CONFIG_PATH, 'utf-8')\n    console.log('Current config file contents:', existingConfig)\n    \n    const configLines = existingConfig.split('\\n')\n    console.log('Processing', configLines.length, 'lines')\n    \n    // Update only the bandwidth values\n    const updatedLines = configLines.map(line => {\n      if (line.trim().startsWith('#') || !line.trim()) {\n        return line\n      }\n      const match = line.match(/^(\\w+)=\"([^\"]*)\"/)\n      if (match) {\n        const [, key] = match\n        if (data[key] !== undefined) {\n          // Handle bandwidth values with units\n          if (key.includes('BANDWIDTH')) {\n            const bandwidthValue = data[key] as BandwidthValue\n            const newLine = `${key}=\"${bandwidthValue.value}${bandwidthValue.unit}\"`\n            console.log('Updating bandwidth line:', { original: line, new: newLine })\n            return newLine\n          }\n          const newLine = `${key}=\"${data[key]}\"`\n          console.log('Updating non-bandwidth line:', { original: line, new: newLine })\n          return newLine\n        }\n      }\n      return line\n    })\n    \n    // Write back the entire config with preserved formatting\n    console.log('Writing updated config back to file...')\n    console.log('New config contents:', updatedLines.join('\\n'))\n    await fs.writeFile(CONFIG_PATH, updatedLines.join('\\n'))\n    console.log('Config file write complete')\n    \n    // Execute update script\n    console.log('Executing update script:', UPDATE_SCRIPT)\n    const { stdout, stderr } = await execAsync(UPDATE_SCRIPT)\n    console.log('Update script stdout:', stdout)\n    if (stderr) {\n      console.log('Update script stderr:', stderr)\n    }\n    console.log('Update script execution complete')\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Config update error:', error)\n    // Log more details about the error\n    if (error instanceof Error) {\n      console.error('Error name:', error.name)\n      console.error('Error message:', error.message)\n      console.error('Error stack:', error.stack)\n    }\n    return NextResponse.json({ error: 'Failed to update config', details: String(error) }, { status: 500 })\n  } finally {\n    console.log('POST /api/network-config completed')\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}