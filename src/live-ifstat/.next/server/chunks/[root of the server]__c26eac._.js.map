{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///usr/local/darkflows/src/live-ifstat/app/api/speedtest/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { spawn } from 'child_process'\n\n// Add GET handler for SSE\nexport async function GET() {\n  console.log('=== SPEEDTEST START ===')\n  \n  return new NextResponse(new ReadableStream({\n    async start(controller) {\n      try {\n        const speedtest = spawn('speedtest', [\n          '--accept-license', \n          '--format=json'\n        ])\n        let buffer = ''\n\n        controller.enqueue('data: {\"status\": \"Starting speed test...\"}\\n\\n')\n\n        speedtest.stdout.on('data', (data) => {\n          buffer += data.toString()\n        })\n\n        speedtest.stderr.on('data', (data) => {\n          const errorData = data.toString()\n          try {\n            const parsed = JSON.parse(errorData)\n            if (parsed.type === 'log' && parsed.level === 'error') {\n              console.log('Speedtest error:', parsed.message)\n              if (!parsed.message.includes('Timeout occurred')) {\n                controller.enqueue(`data: {\"error\": \"${parsed.message}\"}\\n\\n`)\n                controller.close()\n              }\n            }\n          } catch {\n            console.log('Speedtest stderr:', errorData)\n          }\n        })\n\n        speedtest.on('error', (error) => {\n          console.log('Speedtest error:', error.message)\n          controller.enqueue(`data: {\"error\": \"${error.message}\"}\\n\\n`)\n          controller.close()\n        })\n\n        speedtest.on('close', (code) => {\n          console.log('Speedtest exit code:', code)\n          \n          if (code === 0 && buffer) {\n            try {\n              const rawResult = JSON.parse(buffer)\n              const result = {\n                download: rawResult.download.bandwidth * 8 / 1000000, // Convert to Mbps\n                upload: rawResult.upload.bandwidth * 8 / 1000000,\n                idleLatency: rawResult.ping.latency,\n                jitterDown: rawResult.download.latency.jitter,\n                jitterUp: rawResult.upload.latency.jitter,\n                jitterIdle: rawResult.ping.jitter,\n                packetLoss: rawResult.packetLoss,\n                serverName: `${rawResult.server.name} - ${rawResult.server.location}`,\n                isp: rawResult.isp,\n                resultUrl: rawResult.result.url\n              }\n              controller.enqueue(`data: {\"result\": ${JSON.stringify(result)}}\\n\\n`)\n            } catch (err) {\n              console.log('Parse error:', err)\n              controller.enqueue(`data: {\"error\": \"Parse failed\"}\\n\\n`)\n            }\n          } else {\n            controller.enqueue(`data: {\"error\": \"Test failed\"}\\n\\n`)\n          }\n          console.log('=== SPEEDTEST END ===')\n          controller.close()\n        })\n      } catch (err) {\n        console.log('Startup error:', err)\n        controller.enqueue(`data: {\"error\": \"Startup failed\"}\\n\\n`)\n        controller.close()\n      }\n    }\n  }), {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive'\n    }\n  })\n}\n\n// Modify POST to just return success\nexport async function POST() {\n  return NextResponse.json({ success: true })\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,QAAQ,GAAG,CAAC;IAEZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,IAAI,eAAe;QACzC,MAAM,OAAM,UAAU;YACpB,IAAI;gBACF,MAAM,YAAY,CAAA,GAAA,mHAAA,CAAA,QAAK,AAAD,EAAE,aAAa;oBACnC;oBACA;iBACD;gBACD,IAAI,SAAS;gBAEb,WAAW,OAAO,CAAC;gBAEnB,UAAU,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC;oBAC3B,UAAU,KAAK,QAAQ;gBACzB;gBAEA,UAAU,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC;oBAC3B,MAAM,YAAY,KAAK,QAAQ;oBAC/B,IAAI;wBACF,MAAM,SAAS,KAAK,KAAK,CAAC;wBAC1B,IAAI,OAAO,IAAI,KAAK,SAAS,OAAO,KAAK,KAAK,SAAS;4BACrD,QAAQ,GAAG,CAAC,oBAAoB,OAAO,OAAO;4BAC9C,IAAI,CAAC,OAAO,OAAO,CAAC,QAAQ,CAAC,qBAAqB;gCAChD,WAAW,OAAO,CAAC,CAAC,iBAAiB,EAAE,OAAO,OAAO,CAAC,MAAM,CAAC;gCAC7D,WAAW,KAAK;4BAClB;wBACF;oBACF,EAAE,OAAM;wBACN,QAAQ,GAAG,CAAC,qBAAqB;oBACnC;gBACF;gBAEA,UAAU,EAAE,CAAC,SAAS,CAAC;oBACrB,QAAQ,GAAG,CAAC,oBAAoB,MAAM,OAAO;oBAC7C,WAAW,OAAO,CAAC,CAAC,iBAAiB,EAAE,MAAM,OAAO,CAAC,MAAM,CAAC;oBAC5D,WAAW,KAAK;gBAClB;gBAEA,UAAU,EAAE,CAAC,SAAS,CAAC;oBACrB,QAAQ,GAAG,CAAC,wBAAwB;oBAEpC,IAAI,SAAS,KAAK,QAAQ;wBACxB,IAAI;4BACF,MAAM,YAAY,KAAK,KAAK,CAAC;4BAC7B,MAAM,SAAS;gCACb,UAAU,UAAU,QAAQ,CAAC,SAAS,GAAG,IAAI;gCAC7C,QAAQ,UAAU,MAAM,CAAC,SAAS,GAAG,IAAI;gCACzC,aAAa,UAAU,IAAI,CAAC,OAAO;gCACnC,YAAY,UAAU,QAAQ,CAAC,OAAO,CAAC,MAAM;gCAC7C,UAAU,UAAU,MAAM,CAAC,OAAO,CAAC,MAAM;gCACzC,YAAY,UAAU,IAAI,CAAC,MAAM;gCACjC,YAAY,UAAU,UAAU;gCAChC,YAAY,GAAG,UAAU,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,MAAM,CAAC,QAAQ,EAAE;gCACrE,KAAK,UAAU,GAAG;gCAClB,WAAW,UAAU,MAAM,CAAC,GAAG;4BACjC;4BACA,WAAW,OAAO,CAAC,CAAC,iBAAiB,EAAE,KAAK,SAAS,CAAC,QAAQ,KAAK,CAAC;wBACtE,EAAE,OAAO,KAAK;4BACZ,QAAQ,GAAG,CAAC,gBAAgB;4BAC5B,WAAW,OAAO,CAAC,CAAC,mCAAmC,CAAC;wBAC1D;oBACF,OAAO;wBACL,WAAW,OAAO,CAAC,CAAC,kCAAkC,CAAC;oBACzD;oBACA,QAAQ,GAAG,CAAC;oBACZ,WAAW,KAAK;gBAClB;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,GAAG,CAAC,kBAAkB;gBAC9B,WAAW,OAAO,CAAC,CAAC,qCAAqC,CAAC;gBAC1D,WAAW,KAAK;YAClB;QACF;IACF,IAAI;QACF,SAAS;YACP,gBAAgB;YAChB,iBAAiB;YACjB,cAAc;QAChB;IACF;AACF;AAGO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAK;AAC3C"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}