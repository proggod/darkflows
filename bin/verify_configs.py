#!/usr/bin/env python3

import os
import re
from datetime import datetime

# Configuration file path
CONFIG_FILE = "/etc/darkflows/d_network.cfg"

# Default values for required fields
DEFAULT_VALUES = {
    "PRIMARY_INTERFACE": "lan1",
    "PRIMARY_EGRESS_BANDWIDTH": "20mbit",
    "PRIMARY_INGRESS_BANDWIDTH": "350mbit",
    "PRIMARY_LABEL": "Primary",
    
    "SECONDARY_INTERFACE": "lan2",
    "SECONDARY_EGRESS_BANDWIDTH": "20mbit",
    "SECONDARY_INGRESS_BANDWIDTH": "350mbit",
    "SECONDARY_LABEL": "Secondary",
    
    "INTERNAL_INTERFACE": "lan0",
    "INTERNAL_EGRESS_BANDWIDTH": "2.5gbit",
    "INTERNAL_INGRESS_BANDWIDTH": "2.5gbit",
    "INTERNAL_LABEL": "Internal",
    
    "ZONE_ID": "",
    "RECORD_ID": "",
    "API_TOKEN": "",
    "RECORD_NAME": "ai.darkflows.com",
    
    "CAKE_PARAMS": "ethernet besteffort wash internet split-gso rtt 50ms  nat memlimit 8mb",
    "CAKE_DEFAULT": "ethernet besteffort wash internet split-gso rtt 100ms  nat memlimit 16mb"
}

def read_config_file(file_path):
    """Read the configuration file and return its contents as a string."""
    try:
        with open(file_path, 'r') as file:
            return file.read()
    except FileNotFoundError:
        # If file doesn't exist, create an empty one with header
        timestamp = datetime.now().strftime("%a %b %d %I:%M:%S %p %Z %Y")
        header = f"# {file_path}\n# Generated by setup script on {timestamp}\n"
        header += "# Configuration for Primary and Secondary Network Interfaces\n\n"
        
        # Ensure directory exists
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        with open(file_path, 'w') as file:
            file.write(header)
        return header

def get_existing_fields(config_content):
    """Extract existing field names and values from config content."""
    existing_fields = {}
    pattern = re.compile(r'^([A-Z_]+)=(?:"([^"]*)"|(.*))$', re.MULTILINE)
    
    for match in pattern.finditer(config_content):
        key = match.group(1)
        # Use group 2 if the value is quoted, otherwise use group 3
        value = match.group(2) if match.group(2) is not None else match.group(3)
        existing_fields[key] = value
        
    return existing_fields

def update_config_file(file_path, config_content, existing_fields):
    """Update the config file with any missing fields."""
    missing_fields = {}
    modified = False
    
    # Check for missing fields
    for key, default_value in DEFAULT_VALUES.items():
        if key not in existing_fields:
            missing_fields[key] = default_value
            modified = True
    
    if not modified:
        print("All required fields are already present in the configuration file.")
        return
    
    # Append missing fields to the config content
    with open(file_path, 'w') as file:
        # Write existing content
        file.write(config_content)
        
        # Add a separator if there's no newline at the end
        if not config_content.endswith('\n'):
            file.write('\n')
        
        # Add missing fields
        file.write("\n# Added missing fields\n")
        for key, value in missing_fields.items():
            if value == "":
                file.write(f'{key}=""\n')
            else:
                file.write(f'{key}="{value}"\n')
        
    print(f"Added {len(missing_fields)} missing fields to the configuration file:")
    for key in missing_fields:
        print(f"  - {key}")

def main():
    """Main function to check and update the configuration file."""
    print(f"Checking configuration file: {CONFIG_FILE}")
    
    # Read the current config file
    config_content = read_config_file(CONFIG_FILE)
    
    # Get existing fields
    existing_fields = get_existing_fields(config_content)
    
    # Update the config file with any missing fields
    update_config_file(CONFIG_FILE, config_content, existing_fields)

if __name__ == "__main__":
    main()


